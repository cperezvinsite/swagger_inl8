swagger: "2.0"
info:
  description: "This is the api for the INL8 V2.X.X <br>Developed By INSITE S.A.S - <b>I+D Team</b><br><ul><li>Camilo Pérez Vélez</li><li>Alejandro Rosso Pérez</li><li>Leonardo Maya Iregui</li><li>David Mora Rodriguez</li>"
  version: "2.X.Y"
  title: "INL8"
  termsOfService: "http://insite.com.co/"
  contact:
    name: IOT Support
    email: "iot@insite.com.co"
  license:
    name: "All rights reserved "
    url: "http://www.insite.com.co"
externalDocs:
  description: Find out more docs
  url: https://insite.com.co/wp-content/uploads/2019/01/INL8.pdf
basePath: "/"
tags:
- name: "HTML"
  description: "This is the api to get all HTML pages"
- name: "Ping Sensor"
  description: "Ping sensor module"
- name: "Device info"
  description: "Get all info of the device"
- name: "Network"
  description: "Configure the device network API"
- name: "Device actions"
  description: "Get functions of device actions"
- name: "Configurations"
  description: "Get functions of device actions"
- name: "Scenes"
  description: "Api for turn off all, presence simulator and energy saving scenes"
- name: "dsPIC"
  description: "Control dsPIC stuff."
- name: "Alarm"
  description: "Control device alarm module."

schemes:
- "http"

paths:
  /:
    get:
      tags:
      - "HTML"
      - "Configurations"
      summary: "Return the HTML of the WIFI configuration panel"
      description: "This screen is used to change the network configurations, such as the AP to which the device is connected."
      operationId: "getConfigurationsHTML"
      consumes:
      - "text/html"
      produces:
      - "text/html"
      responses:
        200:
          description: "&#60;html>&#60;/html>"
  /ping-sensor:
    get:
      tags:
      - "HTML"
      - "Ping Sensor"
      summary: "Return the HTML of ping sensor"
      description: ""
      operationId: "getPingSensorHTML"
      consumes:
      - "text/html"
      produces:
      - "text/html"
      responses:
        200:
          description: "&#60;html>&#60;/html>"
  /api/v2/ping-sensor/info:
    get:
      tags:
      - "Ping Sensor"
      summary: "Get ping sensor info"
      description: ""
      operationId: "pingInfo"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/pingSensorInfo"
  /api/v2/ping-sensor/switch:
    get:
      tags:
      - "Ping Sensor"
      summary: "Switch ping sensor state"
      description: "If the ping sensor is off call this api will turn it on and vice versa"
      operationId: "pingSwitch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/pingSensorInfo"
  /api/v2/ping-sensor:
    post:
      tags:
      - "Ping Sensor"
      summary: "Edit ping sensor values"
      description: "Call this api with the required arguments and modify the device values"
      operationId: "editPingSensor"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "required body arguments"
          required: true
          schema:
            $ref: "#/definitions/editPingSensor"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/pingSensorInfo"
        201:
          description: "This is an error"
          schema:
            $ref: "#/definitions/success_false_response"
  /api-version:
    get:
      tags:
      - "Device info"
      summary: "Return the api version in json"
      description: "This version is the current api, the number returned here is the number you should use int he url after /api/v# "
      operationId: "apiVersion"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiVersion"
  /firmware-update:
    get:
      tags:
      - "Device info"
      summary: "Update device firmware"
      description: "If the device has internet connection and has been authenticated on Intelligence server, this method will call the manual firmware update and the device will try to update if there is a new firmware version."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_response"
  /info:
    get:
      tags:
      - "Device info"
      summary: "Get all info of the device"
      description: "This API returns a json with all the information about the device"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/info"
  /api/v2/time:
    get:
      tags:
      - "Device info"
      summary: "get the current date the device"
      description: "get the current date the device"
      operationId: "getTime"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/getTime"
  /api/v2/version:
    get:
      tags:
      - "Device info"
      summary: "get the current firmware version"
      description: "Get a json with the current firmware version"
      operationId: "getFwVersion"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/fwVersion"
  /network/scan:
    get:
      tags:
      - "Network"
      summary: "Get all networks nearby"
      description: "This api calls the scan method of the device and return an object with the closer ap"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/networkScan"
  /network/set-wifi:
    post:
      tags:
      - "Network"
      summary: "Get all networks nearby"
      description: "This api calls the scan method of the device and return an object with the closer ap"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "required body arguments"
          required: true
          schema:
            $ref: "#/definitions/setWifi"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_response"
        201:
          description: "This is an error"
          schema:
            $ref: "#/definitions/success_false_response"
  /api/v2/ota-hour:
    post:
      tags:
      - "Configurations"
      summary: "set the hour to run auto updates"
      description: "This set the hour to device for check and download the new firmware. The time is in 24h format"
      operationId: "setOtaHour"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "required body arguments"
          required: true
          schema:
            $ref: "#/definitions/setOta"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_response"
        201:
          description: "This is an error"
          schema:
            $ref: "#/definitions/success_false_response"
  /api/v2/thing:
    put:
      tags:
      - "Configurations"
      summary: "Edit the device"
      description: "Edit the name, room and the property 'online' of the device"
      operationId: "editDevice"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "required body arguments"
          required: true
          schema:
            $ref: "#/definitions/editDevice"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/json_info"
        201:
          description: "This is an error"
          schema:
            $ref: "#/definitions/success_false_response"
  /api/v2/switch/{zone}:
    get:
      tags:
      - "Device actions"
      summary: "Swtich a zone"
      description: "Swtich a zone"
      operationId: "switchZone"
      produces:
      - "application/json"
      parameters:
      - name: "zone"
        in: "path"
        description: "a zone from 1-8 to manipulate"
        required: true
        type: "integer"
        format: "int64"
        enum: [1,2,3,4,5,6,7,8]
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_response"
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_false_response"
  /api/v2/turn-on/{zone}:
    get:
      tags:
      - "Device actions"
      summary: "turn on a zone"
      description: "turn on a zone"
      operationId: "turnOn"
      produces:
      - "application/json"
      parameters:
      - name: "zone"
        in: "path"
        description: "a zone from 1-8 to manipulate"
        required: true
        type: "integer"
        format: "int64"
        enum: [1,2,3,4,5,6,7,8]
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_response"
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_false_response"
  /api/v2/turn-off/{zone}:
    get:
      tags:
      - "Device actions"
      summary: "turn off a zone"
      description: "turn off a zone"
      operationId: "turnOff"
      produces:
      - "application/json"
      parameters:
      - name: "zone"
        in: "path"
        description: "a zone from 1-8 to manipulate"
        required: true
        type: "integer"
        format: "int64"
        enum: [1,2,3,4,5,6,7,8]
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_response"
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_false_response"
  /api/v2/status:
    get:
      tags:
      - "Device actions"
      summary: "get json status"
      description: "get json status"
      operationId: "getStatus"
      produces:
      - "application/json" 
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/device_status"
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_false_response"
  /api/v2/status/port/{port}:
    get:
      tags:
      - "Device actions"
      summary: "get json status"
      description: "get json status and create port for socket communication"
      operationId: "getStatusPort"
      parameters:
      - name: "port"
        in: "path"
        description: "the port where the client will connect"
        required: true
        type: "integer"
        format: "int64"
      produces:
      - "application/json" 
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/device_status"
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_false_response"
  /api/v2/status/relays:
    get:
      tags:
      - "Device actions"
      summary: "get json status of the relay"
      description: "get json status of the relay"
      operationId: "getStatusRelays"
      produces:
      - "application/json" 
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/device_relay_status"
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_false_response"
  /api/v2/simulator:
    get:
      tags:
      - "Scenes"
      summary: "Api for toggle the presence simulator scene "
      description: "Toggle presence simulator This module only works from 18:00 to 23:59"
      operationId: "presenceSimulator"
      produces:
      - "application/json" 
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/scene_success"
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_false_response"
  /api/v2/simulator/exclude/{zone}:
    get:
      tags:
      - "Scenes"
      summary: "Api for exclude a zone of presence simulator"
      description: "exclude a zone of presence simulator"
      operationId: "presenceSimulatoExclude"
      parameters:
      - name: "zone"
        in: "path"
        description: "a zone from 1-8 to be excluded from presence simulator"
        required: true
        type: "integer"
        format: "int64"
        enum: [1,2,3,4,5,6,7,8]
      produces:
      - "application/json" 
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_response"
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_false_response"
  /api/v2/simulator/include/{zone}:
    get:
      tags:
      - "Scenes"
      summary: "Api for includ a zone of presence simulator"
      description: "includ a zone of presence simulator"
      operationId: "presenceSimulatoInclude"
      parameters:
      - name: "zone"
        in: "path"
        description: "a zone from 1-8 to be included in presence simulator"
        required: true
        type: "integer"
        format: "int64"
        enum: [1,2,3,4,5,6,7,8]
      produces:
      - "application/json" 
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_response"
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_false_response"
  /api/v2/energy-saving:
    get:
      tags:
      - "Scenes"
      summary: "Api for toggle the energy saving mode scene"
      description: "Toggle energy saving mode\n This module turns off the first light when a fourth is turned on"
      operationId: "energySaving"
      produces:
      - "application/json" 
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/scene_success"
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_false_response"
  /api/v2/energy-saving/exclude/{zone}:
    get:
      tags:
      - "Scenes"
      summary: "Api for exclude a zone of energy saving mode"
      description: "exclude a zone of energy saving mode"
      operationId: "energySavingExclude"
      parameters:
      - name: "zone"
        in: "path"
        description: "a zone from 1-8 to be excluded from energy saving mode"
        required: true
        type: "integer"
        format: "int64"
        enum: [1,2,3,4,5,6,7,8]
      produces:
      - "application/json" 
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_response"
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_false_response"
  /api/v2/energy-saving/include/{zone}:
    get:
      tags:
      - "Scenes"
      summary: "Api for includ a zone of energy saving"
      description: "includ a zone of energy saving"
      operationId: "energySavingInclude"
      parameters:
      - name: "zone"
        in: "path"
        description: "a zone from 1-8 to be included in energy saving"
        required: true
        type: "integer"
        format: "int64"
        enum: [1,2,3,4,5,6,7,8]
      produces:
      - "application/json" 
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_response"
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_false_response"
  /api/v2/turn-off-all:
    get:
      tags:
      - "Scenes"
      summary: "Api for run the turn off scene scene"
      description: "Toggle turn off scene"
      operationId: "turnOffAll"
      produces:
      - "application/json" 
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_response"
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_false_response"
  /api/v2/turn-off-all/exclude/{zone}:
    get:
      tags:
      - "Scenes"
      summary: "Api for exclude a zone of turn off scene"
      description: "exclude a zone of turn off scene"
      operationId: "turnOffAllExclude"
      parameters:
      - name: "zone"
        in: "path"
        description: "a zone from 1-8 to be excluded from turn off scene"
        required: true
        type: "integer"
        format: "int64"
        enum: [1,2,3,4,5,6,7,8]
      produces:
      - "application/json" 
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_response"
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_false_response"
  /api/v2/turn-off-all/include/{zone}:
    get:
      tags:
      - "Scenes"
      summary: "Api for includ a zone of turn off scene"
      description: "includ a zone of turn off scene"
      operationId: "turnOffAllInclude"
      parameters:
      - name: "zone"
        in: "path"
        description: "a zone from 1-8 to be included in turn off scene"
        required: true
        type: "integer"
        format: "int64"
        enum: [1,2,3,4,5,6,7,8]
      produces:
      - "application/json" 
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_response"
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_false_response"
  /api/v2/scene/excluded-zones:
    get:
      tags:
      - "Scenes"
      summary: "Api for get excluded "
      description: "get excluded zones in all scenes"
      operationId: "getAllExcludedZones"
      produces:
      - "application/json" 
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_scenes_excluded"
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success_false_response"
  
  /api/v2/pic/enable-sensors:
    get:
      summary: "Enable dsPIC zones sensors."
      description:
        "When current sensors are enable, the on/off state of each zone will be 
        determined by the amount of current flowing through the corresponding 
        sensor."
      operationId: "dspic-enable-sensors"
      tags:
        - "dsPIC"
      produces:
       - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/success_response"
            
  /api/v2/pic/disable-sensors:
    get:
      summary: "Disable dsPIC zones sensors."
      description:
        "When current sensors are disable, the on/off state of each zone will be 
        determined by the state of the corresponding relay."
      operationId: "dspic-disable-sensors"
      tags:
        - "dsPIC"
      produces:
        - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/success_response"
  
  /api/v2/pic/enable-reset:
    get:
      summary: "Enable dsPIC reset pin."
      description:
        "ESP32 can restart dsPIC."
      operationId: "dspic-enable-reset"
      tags:
        - "dsPIC"
      produces:
       - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/success_response"
            
  /api/v2/pic/disable-reset:
    get:
      summary: "Disable dsPIC reset pin."
      description:
        "ESP32 cannot restart dsPIC."
      operationId: "dspic-disable-reset"
      tags:
        - "dsPIC"
      produces:
        - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/success_response"
  
  /api/v2/pic/version:
    get:
      summary: "Get dsPIC firmware version."
      description: "Returns version of firmware running on the dsPIC."
      operationId: "dspic-version"
      tags:
        - "dsPIC"
      produces:
       - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/dspic_ver_response"
  
  /api/v2/pic/reboot:
    get:
      summary: "Reboot dsPIC."
      description:
        "Perform a soft reset of dsPIC. Current configurations are conserved."
      operationId: "dspic-reboot"
      tags:
        - "dsPIC"
      produces:
       - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/success_response"
  
  /api/v2/pic/factory-reset:
    get:
      summary: "Restore dsPIC factory defaults."
      description:
        "Perform a soft reset of dsPIC. Current configurations are conserved."
      operationId: "dspic-factory-reset"
      tags:
        - "dsPIC"
      produces:
       - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/success_response"
  
  /api/v2/pic/enable-debug:
    get:
      summary: "Enable dsPIC debug printf's."
      description:
        "dsPIC will send debug values through the UART."
      operationId: "dspic-enable-debug"
      tags:
        - "dsPIC"
      produces:
       - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/success_response"
            
  /api/v2/pic/disable-debug:
    get:
      summary: "Disable dsPIC debug printf's."
      description:
        "dsPIC will not send debug values through the UART."
      operationId: "dspic-disable-debug"
      tags:
        - "dsPIC"
      produces:
        - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/success_response"
  
  /api/v2/pic/get-threshold/{sensor}:
    get:
      summary: "Get zone sensor decision thresholds."
      description:
        "Return current decision thresholds."
      operationId: "dspic-get-threshold"
      tags:
        - "dsPIC"
      parameters:
      - in: "path"
        name: "sensor"
        description: "Zone sensor id."
        required: true
        type: "integer"
        minimum: 1
        maximum: 8
      produces:
        - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/dspic_thr_response"
  
  /api/v2/pic/set-threshold/{sensor}/{thr_l}/{thr_h}:
    get:
      summary: "Set zone sensor decision thresholds."
      description:
        "Set decision thresholds for the given zone.
        If sensor reading is above lower threshold and below upper threshold, 
        the zone is considered ON, otherwise, it is considered OFF."
      operationId: "dspic-set-threshold"
      tags:
        - "dsPIC"
      parameters:
      - in: "path"
        name: "sensor"
        description: "Zone sensor id."
        required: true
        type: "integer"
        minimum: 1
        maximum: 8
      - in: "path"
        name: "thr_l"
        description: "Lower threshold."
        required: true
        type: "integer"
        format: "int32"
      - in: "path"
        name: "thr_h"
        description: "Upper threshold."
        required: true
        type: "integer"
        format: "int32"
      
      produces:
        - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/success_response"
  
  /api/v2/alarm:
    get:
      description: "Get alarm operating mode."
      summary: "Get alarm operating mode."
      operationId: "alarm-get-status"
      tags:
        - "Alarm"
      responses:
        200:
          description: "Alarm status."
          schema:
            $ref: "#/definitions/alarm_status"
  
  /api/v2/alarm/display:
    put:
      description: "Enable/disable alarm features."
      summary: "Enable/disable alarm features."
      operationId: "alarm-set-display"
      tags:
        - "Alarm"
      parameters:
        - in: "body"
          name: "body"
          description: "Set alarm features status."
          required: true
          schema:
            type: "object"
            properties:
              status:
                type: "boolean"
                example: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/success_response"
  
  /api/v2/alarm/room:
    put:
      description: "Set alarm room."
      summary: "Set alarm room."
      operationId: "alarm-set-room"
      tags:
        - "Alarm"
      parameters:
        - in: "body"
          name: "body"
          description: "Set alarm room."
          required: true
          schema:
            type: "object"
            properties:
              room:
                type: "string"
                example: "General"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/success_response"
  
  /api/v2/alarm/unlock:
    get:
      description: "Get challenge to perform alarm operations."
      summary: "Get challenge to perform alarm operations."
      operationId: "alarm-get-challenge"
      tags:
        - "Alarm"
      responses:
        200:
          description: "Challenge"
          schema:
            $ref: "#/definitions/alarm_challenge_obj"
  
  /api/v2/alarm/arm:
    post:
      description: "Set alarm operating mode."
      summary: "Set alarm operating mode."
      operationId: "alarm-set-mode"
      tags:
        - "Alarm"
      parameters:
        - in: "body"
          name: "body"
          description: "Contains authentication data and desired alarm mode."
          required: true
          schema:
            $ref: "#/definitions/alarm_arm_obj"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/success_response"
  
  /api/v2/alarm/disarm:
    post:
      description: "Turn off alarm."
      summary: "Turn off alarm."
      operationId: "alarm-turn-off"
      tags:
        - "Alarm"
      parameters:
        - in: "body"
          name: "body"
          description: "Contains authentication data."
          required: true
          schema:
            $ref: "#/definitions/alarm_disarm_obj"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/success_response"
  
  /api/v2/alarm/sensor/{id}:
    post:
      description: "Configure alarm sensor."
      summary: "Configure alarm sensor."
      operationId: "alarm-config-sensor"
      tags:
        - "Alarm"
      parameters:
        - in: "path"
          name: "id"
          required: true
          description: "Sensor number."
          type: "integer"
          minimum: 1
          maximum: 6
        - in: "body"
          name: "body"
          required: true
          description: "Sensor configuration parameters."
          schema:
            $ref: "#/definitions/alarm_sensor_cfg_obj"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/success_response"
  
  /api/v2/alarm/sensor/{id}/chal/{chal}/key/{key}:
    delete:
      description: "Delete sensor configuration and disable it."
      summary: "Delete sensor configuration and disable it."
      operationId: "alarm-delete-sensor"
      tags:
        - "Alarm"
      parameters:
        - in: "path"
          name: "id"
          required: true
          description: "Sensor number."
          type: "integer"
          minimum: 1
          maximum: 6
        - in: "path"
          name: "chal"
          required: true
          type: "integer"
          format: "uint64"
        - in: "path"
          name: "key"
          required: true
          type: "string"
          format: "binary"
          description: "Authentication key."
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/success_response"
  
  /api/v2/alarm/pin:
    get:
      description: "Get Names and slots of stored PINs."
      summary: "Get Names and slots of stored PINs."
      operationId: "alarm-get-pins"
      tags:
        - "Alarm"
      responses:
        200:
          description: "Stored PINs list."
          schema:
            type: "object"
            properties:
              success:
                type: "boolean"
                example: true
              pins:
                type: "array"
                items:
                  $ref: "#/definitions/alarm_pin_list_obj"
    post:
      description: "Create user PIN."
      summary: "Create user PIN."
      operationId: "alarm-create-pin"
      tags:
        - "Alarm"
      parameters:
        - in: "body"
          name: "body"
          required: true
          description: "Authentication data with ciphered PIN."
          schema:
            $ref: "#/definitions/alarm_pin_create_obj"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/success_response"
  
  /api/v2/alarm/pin/slot/:slot/chal/:chal/key/:key:
    delete:
      description: "Delete user PIN."
      summary: "Delete user PIN."
      operationId: "alarm-delete-pin"
      tags:
        - "Alarm"
      parameters:
        - in: "path"
          name: "slot"
          required: true
          description: "PIN slot number."
          type: "integer"
          minimum: 1
          maximum: 9
        - in: "path"
          name: "chal"
          required: true
          type: "integer"
          format: "uint64"
        - in: "path"
          name: "key"
          required: true
          type: "string"
          format: "binary"
          description: "Authentication key."
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/success_response"
  
definitions:
  success_scenes_excluded:
    type: "object"
    properties:
      energy_excluded:
        type: "object"
        properties:
          z1: 
            type: "integer"
            enum: [0,1]
            description: "if 0 this zone is not excluded, if 1 it is excluded"
          z2: 
            type: "integer"
            enum: [0,1]
            description: "if 0 this zone is not excluded, if 1 it is excluded"
          z3: 
            type: "integer"
            enum: [0,1]
            description: "if 0 this zone is not excluded, if 1 it is excluded"
          z4: 
            type: "integer"
            enum: [0,1]
            description: "if 0 this zone is not excluded, if 1 it is excluded"
          z5: 
            type: "integer"
            enum: [0,1]
            description: "if 0 this zone is not excluded, if 1 it is excluded"
          z6: 
            type: "integer"
            enum: [0,1]
            description: "if 0 this zone is not excluded, if 1 it is excluded"
          z7: 
            type: "integer"
            enum: [0,1]
            description: "if 0 this zone is not excluded, if 1 it is excluded"
          z8: 
            type: "integer"
            enum: [0,1]
            description: "if 0 this zone is not excluded, if 1 it is excluded"
      presence_excluded:
        type: "object"
        properties:
          z1: 
            type: "integer"
            enum: [0,1]
            description: "if 0 this zone is not excluded, if 1 it is excluded"
          z2: 
            type: "integer"
            enum: [0,1]
            description: "if 0 this zone is not excluded, if 1 it is excluded"
          z3: 
            type: "integer"
            enum: [0,1]
            description: "if 0 this zone is not excluded, if 1 it is excluded"
          z4: 
            type: "integer"
            enum: [0,1]
            description: "if 0 this zone is not excluded, if 1 it is excluded"
          z5: 
            type: "integer"
            enum: [0,1]
            description: "if 0 this zone is not excluded, if 1 it is excluded"
          z6: 
            type: "integer"
            enum: [0,1]
            description: "if 0 this zone is not excluded, if 1 it is excluded"
          z7: 
            type: "integer"
            enum: [0,1]
            description: "if 0 this zone is not excluded, if 1 it is excluded"
          z8: 
            type: "integer"
            enum: [0,1]
            description: "if 0 this zone is not excluded, if 1 it is excluded"
      turn_off_all_excluded:
        type: "object"
        properties:
          z1: 
            type: "integer"
            enum: [0,1]
            description: "if 0 this zone is not excluded, if 1 it is excluded"
          z2: 
            type: "integer"
            enum: [0,1]
            description: "if 0 this zone is not excluded, if 1 it is excluded"
          z3: 
            type: "integer"
            enum: [0,1]
            description: "if 0 this zone is not excluded, if 1 it is excluded"
          z4: 
            type: "integer"
            enum: [0,1]
            description: "if 0 this zone is not excluded, if 1 it is excluded"
          z5: 
            type: "integer"
            enum: [0,1]
            description: "if 0 this zone is not excluded, if 1 it is excluded"
          z6: 
            type: "integer"
            enum: [0,1]
            description: "if 0 this zone is not excluded, if 1 it is excluded"
          z7: 
            type: "integer"
            enum: [0,1]
            description: "if 0 this zone is not excluded, if 1 it is excluded"
          z8: 
            type: "integer"
            enum: [0,1]
            description: "if 0 this zone is not excluded, if 1 it is excluded"
  scene_success:
    type: "object"
    properties:
      success:
        type: "boolean"
        default: true
      status:
        type: "integer"
        example: 1
        enum: [1, 0]
        description: "if 1 the simulator is ON, if 0 is OFF"
  device_relay_status:
    type: "object"
    properties:
      success: 
        type: "boolean"
        default: true
      relays:
        type: "object"
        properties:
          r1:
            type: "integer"
            example: 0
          r2:
            type: "integer"
            example: 0
          r3:
            type: "integer"
            example: 0
          r4:
            type: "integer"
            example: 0
          r5:
            type: "integer"
            example: 0
          r6:
            type: "integer"
            example: 0
          r7:
            type: "integer"
            example: 0
          r8:
            type: "integer"
            example: 0
  device_status:
    type: "object"
    properties:
      _id: 
        type: "string"
      scenesStatus:
        type: "object"
        properties:
          presenceSimulator:
            type: "object"
            properties:
              icon: 
                type: "string"
                enum: ["lock.svg", "unlock.svg"]
          energySaving:
            type: "object"
            properties:
              icon: 
                type: "string"
                enum: ["esaveon.svg", "esaveoff.svg"]
      zones_type:
        type: "object"
        properties:
          z1:
            description: "type of 1 zone"
            type: "integer"
            enum: [1,2,3,4]
            example: 1
          z2:
            description: "type of 2 zone"
            type: "integer"
            enum: [1,2,3,4]
            example: 1
          z3:
            description: "type of 3 zone"
            type: "integer"
            enum: [1,2,3,4]
            example: 1
          z4:
            description: "type of 4 zone"
            type: "integer"
            enum: [1,2,3,4]
            example: 1
          z5:
            description: "type of 5 zone"
            type: "integer"
            enum: [1,2,3,4]
            example: 1
          z6:
            description: "type of 6 zone"
            type: "integer"
            enum: [1,2,3,4]
            example: 1
          z7:
            description: "type of 7 zone"
            type: "integer"
            enum: [1,2,3,4]
            example: 1
          z8:
            description: "type of 8 zone"
            type: "integer"
            enum: [1,2,3,4]
            example: 1
      zones:
        type: "object"
        properties:
          z1:
            description: "state of 1 zone"
            type: "integer"
            enum: [0,1]
            example: 0
          z2:
            description: "state of 2 zone"
            type: "integer"
            enum: [0,1]
            example: 0
          z3:
            description: "state of 3 zone"
            type: "integer"
            enum: [0,1]
            example: 0
          z4:
            description: "state of 4 zone"
            type: "integer"
            enum: [0,1]
            example: 0
          z5:
            description: "state of 5 zone"
            type: "integer"
            enum: [0,1]
            example: 0
          z6:
            description: "state of 6 zone"
            type: "integer"
            enum: [0,1]
            example: 0
          z7:
            description: "state of 7 zone"
            type: "integer"
            enum: [0,1]
            example: 0
          z8:
            description: "state of 8 zone"
            type: "integer"
            enum: [0,1]
            example: 0
  editPingSensor:
    type: "object"
    properties: 
      interval:
        type: "number"
        example: "20"
      retry:
        type: "number"
        example: "20"
      address:
        type: "string"
  pingSensorInfo:
    type: "object"
    properties: 
      interval:
        type: "number"
      retry:
        type: "number"
      status:
        type: "number"
      address:
        type: "string"
  editDevice:
    type: "object"
    properties: 
      name:
        type: "string"
      room:
        type: "string"
      offline:
        type: "boolean"
        example: true
      r1n:
        type: "string"
        description: "Eoom 1 name"
      r2n:
        type: "string"
        description: "Eoom 2 name"
      r3n:
        type: "string"
        description: "Eoom 3 name"
      r4n:
        type: "string"
        description: "Eoom 4 name"
      r5n:
        type: "string"
        description: "Eoom 5 name"
      r6n:
        type: "string"
        description: "Eoom 6 name"
      r7n:
        type: "string"
        description: "Eoom 7 name"
      r8n:
        type: "string"
        description: "Eoom 8 name"
      z1:
        type: "string"
        description: "Zone 1 name"
      z2:
        type: "string"
        description: "Zone 2 name"
      z3:
        type: "string"
        description: "Zone 3 name"
      z4:
        type: "string"
        description: "Zone 4 name"
      z5:
        type: "string"
        description: "Zone 5 name"
      z6:
        type: "string"
        description: "Zone 6 name"
      z7:
        type: "string"
        description: "Zone 7 name"
      z8:
        type: "string"
        description: "Zone 8 name"
      z1r:
        description: "Zone 1 room id"
        type: "string"
      z2r:
        description: "Zone 2 room id"
        type: "string"
      z3r:
        description: "Zone 3 room id"
        type: "string"
      z4r:
        description: "Zone 4 room id"
        type: "string"
      z5r:
        description: "Zone 5 room id"
        type: "string"
      z6r:
        description: "Zone 6 room id"
        type: "string"
      z7r:
        description: "Zone 7 room id"
        type: "string"
      z8r:
        description: "Zone 8 room id"
        type: "string"
      z1type:
        description: "Zone 1 type"
        type: "integer"
      z2type:
        description: "Zone 2 type"
        type: "integer"
      z3type:
        description: "Zone 3 type"
        type: "integer"
      z4type:
        description: "Zone 4 type"
        type: "integer"
      z5type:
        description: "Zone 5 type"
        type: "integer"
      z6type:
        description: "Zone 6 type"
        type: "integer"
      z7type:
        description: "Zone 7 type"
        type: "integer"
      z8type:
        description: "Zone 8 type"
        type: "integer"
  setOta:
    type: "object"
    properties:
      time:
        type: "string"
        example: "02"
  fwVersion:
    type: "object"
    properties:
      success:
        type: "boolean"
      version:
        type: "string"
        example: "2.0.0"
  setWifi:
    type: "object"
    properties:
      ssid:
        type: "string"
      password:
        type: "string"
      securityType:
        type: "string"
  networkScan:
    type: "object"
    properties:
      mac_addr:
        type: "string"
      e_mac_addr:
        type: "string"
      ssid:
        type: "array"
        items:
          type: "string"
  device_cmd: &device_cmd
    type: "object"
    properties:
      name:
        type: "string"
      url:
        type: "string"
      connectionType:
        type: "string"
      headers:
        type: "object"
      method:
        type: "string"
      useParams:
        type: "boolean"
      hideInMacro:
        type: "boolean"
  json_info:
    type: "object"
    properties:
      _id: 
        type: "string"
        example: "deadbeef8badbaaaaaadf00d"
      thingName: 
        type: "string"
        example: "INL8"
      homeId: 
        type: "string"
        example: "deadbeef8badbaaaaaadf00d"
      room: 
        type: "string"
        example: "General"
      mac: 
        type: "string"
        example: "0a1b2c3d4e5f"
      type: 
        type: "string"
        example: "thing"
      thingType: 
        type: "string"
        example: "lights"
      apiVersion: 
        type: "string"
        example: "/v2"
      mobile:
        type: "boolean"
        default: false
        example: false
      position:
        type: "string"
        example: "fixed"
      draw:
        type: "boolean"
        default: true
        example: true
      connections:
        type: "array"
        items:
          type: "object"
          properties:
            t:
              type: "string"
              example: "eth"
      os:
        type: "object"
        properties:
          n:
            type: "string"
            example: "FreeRTOS"
          v:
            type: "string"
            example: "V8.2.0"
      hw:
        type: "object"
        properties:
          n:
            type: "string"
            example: "ESP"
          v:
            type: "string"
            example: "32"
          fVersion:
            type: "string"
            example: "3.1.4"
      commandLib:
        type: "object"
        properties:
          status:
            <<: *device_cmd
            example:
              name: "status"
              url: "/status/"
              connectionType: "ip"
              headers: {}
              method: "GET"
              hideInMacro: true
          switch:
            <<: *device_cmd
            example:
              name: "Switch"
              url: "/switch/"
              connectionType: "ip"
              method: "GET"
              useParams: true
          presenceSimulator:
            <<: *device_cmd
            example:
              name: "Simulador de presencia"
              url: "/simulator/"
              connectionType: "ip"
              headers: {}
              method: "GET"
          energySaving:
            <<: *device_cmd
            example:
              name: "Ahorro de energía"
              url: "/energy-saving/"
              connectionType: "ip"
              headers: {}
              method: "GET"
          turnOn:
            <<: *device_cmd
            example:
              name: "Encender"
              url: "/turn-on/"
              connectionType: "ip"
              headers: {}
              method: "GET"
              useParams: true
          turnOff:
            <<: *device_cmd
            example:
              name: "Apagar"
              url: "/turn-off/"
              connectionType: "ip"
              headers: {}
              method: "GET"
              useParams: true
          turnOnAll:
            <<: *device_cmd
            example:
              name: "Encender Todo"
              url: "/turn-on-all/"
              connectionType: "ip"
              headers: {}
              method: "GET"
          turnOffAll:
            <<: *device_cmd
            example:
              name: "Apagar Todo"
              url: "/turn-off-all/"
              connectionType: "ip"
              headers: {}
              method: "GET"
          moveDown:
            <<: *device_cmd
            example:
              name: "Bajar"
              url: "/move-down"
              connectionType: "ip"
              headers: {}
              method: "GET"
              useParams: true
          moveUp:
            <<: *device_cmd
            example:
              name: "Subir"
              url: "/move-up"
              connectionType: "ip"
              headers: {}
              method: "GET"
              useParams: truemove-down
          stop:
            <<: *device_cmd
            example:
              name: "Parar"
              url: "/stop"
              connectionType: "ip"
              headers: {}
              method: "GET"
              useParams: true
      graphics:
        type: "object"
        properties:
          type: 
            type: "string"
            example: "lights"
          icon: 
            type: "string"
            example: "lights"
          family: 
            type: "string"
            example: "lights"
          menuType: 
            type: "string"
            example: "inl-8"
          showInMenu: 
            type: "boolean"
            default: false
          noBlocks: 
            type: "boolean"
            default: true
          useInmoteScenes:
            type: "boolean"
            default: true
          useInmoteSecurity:
            type: "boolean"
            default: true
          rooms:
            type: "object"
            properties:
              r1: 
                type: "object"
                properties:
                  name:
                    type: "string"
                    example: "General"
          zones:
            type: "object"
            properties:
              z1: 
                type: "object"
                properties:
                  s:
                    type: "integer"
                    example: 0
                    enum: [0,1]
                    description: "zone state, 1 is on 0 is off"
                  n:
                    type: "string"
                    example: "zone_name"
                  rid:
                    type: "string"
                    description: "id of the room"
                    example: "r1"
                  id:
                    type: "integer"
                    example: 1
                  z1_type:
                    type: "integer"
                    example: 1
                    description: "luz:1\n alarm:2\n subir cortina:3\n bajar cortina:4"
                    enum: [1,2,3,4]
  info:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/json_info"
  success_response:
    type: "object"
    properties:
      success:
        type: "boolean"
        default: true
  success_false_response:
    type: "object"
    properties:
      success:
        type: "boolean"
        default: false
      error:
        type: "string"
  ApiVersion: 
    type: "object"
    properties:
      version:
        type: "integer"
        example: 2
  getTime:
    type: "object"
    properties:
      success:
        type: "boolean"
      time:
        type: "string"
        example: "Fri Jan 25 13:14:19 2019"
  dspic_ver_response:
    type: "object"
    properties:
      success:
        type: "boolean"
        default: true
      pic-version:
        type: "string"
        example: "1.0.0"
  dspic_thr_response:
    type: "object"
    properties:
      success:
        type: "boolean"
        default: true
      threshold_low:
        type: "integer"
        format: "int32"
        example: "2000"
      threshold_high:
        type: "integer"
        format: "int32"
        example: "2000"
  alarm_modes:
    type: "integer"
    enum: &alarm_modes [0, 1, 2, 3]
    description: >
      * 0: Alarm is off.
      
      * 1: Alarm is in stay mode.
      
      * 2: Alarm is in away mode.
      
      * 3: Alarm is in away mode with presence simulator.
  alarm_sensor_modes:
    type: "integer"
    enum: &alarm_sensor_modes [0, 1, 2]
    description: >
      * 0: Sensor disabled.
      
      * 1: Sensor is active in stay and away alarm modes.
      
      * 2: Sensor is active only in away alarm mode.
  alarm_sensor_types:
    type: "integer"
    enum: &alarm_sensor_types [0, 1, 2, 3, 4]
    description: >
      * 0: Unconfigured.
      
      * 1: Motion.
      
      * 2: Opening.
      
      * 3: Smoke.
      
      * 4: Glassbreak.
  alarm_status:
    type: "object"
    properties:
      success:
        type: "boolean"
        example: true
      room:
        type: "string"
        example: "General"
      mode:
        type: "integer"
        enum: *alarm_modes
        example: 1
      desc:
        type: "string"
        enum: ["off", "stay", "away", "away-sim"]
        example: "stay"
  alarm_challenge_obj:
    type: "object"
    properties:
      success:
        type: "boolean"
        example: true
      chal:
        type: "integer"
        format: "uint64"
        example: 666
  alarm_arm_obj:
    type: "object"
    properties:
      key:
        type: "string"
        format: "binary"
        description: "Authentication key."
        example: "9eccb3be22d297fe1e0b092018d0ff282d0fdaa1c28af83763b740b458b83423"
      chal:
        type: "integer"
        format: "uint64"
        example: 666
      mode:
        type: "integer"
        enum: *alarm_modes
        example: 2
  alarm_disarm_obj:
    type: "object"
    properties:
      key:
        type: "string"
        format: "binary"
        description: "Authentication key."
        example: "9eccb3be22d297fe1e0b092018d0ff282d0fdaa1c28af83763b740b458b83423"
      chal:
        type: "integer"
        format: "uint64"
        example: 666
  alarm_sensor_cfg_obj:
    type: "object"
    properties:
      key:
        type: "string"
        format: "binary"
        description: "Authentication key."
        example: "9eccb3be22d297fe1e0b092018d0ff282d0fdaa1c28af83763b740b458b83423"
      chal:
        type: "integer"
        format: "uint64"
        example: 666
      name:
        type: "string"
        example: "Sensor 1"
      room:
        type: "string"
        example: "General"
      type:
        type: "integer"
        enum: *alarm_sensor_types
        example: 1
      mode:
        type: "integer"
        enum: *alarm_sensor_modes
        example: 1
      delay:
        type: "integer"
        format: "uint8"
        minimum: 0
        maximum: 60
        example: 10
  alarm_pin_create_obj:
    type: "object"
    properties:
      chal:
        type: "integer"
        format: "uint64"
        example: 666
      pin:
        type: "string"
        format: "binary"
        description: "Ciphered PIN."
        example: "0161ff9f7fee806f35638b406c180af1"
      name:
        type: "string"
        example: "PIN 1"
  alarm_pin_list_obj:
    type: "object"
    properties:
      name:
        type: "string"
        example: "PIN 1"
      slot:
        type: "integer"
        minimum: 1
        maximum: 9
        example: 1
